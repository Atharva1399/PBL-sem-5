{"ast":null,"code":"// Real code execution service integration\nexport const executeJavaScriptLocally = (code, testCases) => {\n  const results = testCases.map((testCase, index) => {\n    try {\n      // Create safe execution environment\n      const func = new Function('return ' + code)();\n      let actual;\n      if (testCase.input.includes('target')) {\n        // Two Sum Problem\n        const [nums, target] = eval(`[${testCase.input}]`);\n        actual = JSON.stringify(func(nums, target));\n      } else {\n        // Palindrome Check\n        const input = testCase.input.replace(/\"/g, '');\n        actual = func(input).toString();\n      }\n      return {\n        id: index + 1,\n        input: testCase.input,\n        expected: testCase.expected,\n        actual: actual || 'undefined',\n        passed: actual === testCase.expected,\n        error: null\n      };\n    } catch (error) {\n      return {\n        id: index + 1,\n        input: testCase.input,\n        expected: testCase.expected,\n        actual: 'Error',\n        passed: false,\n        error: error.message\n      };\n    }\n  });\n  return results;\n};\nexport const executePythonCode = (code, testCases) => {\n  // Simulate Python execution\n  return testCases.map((testCase, index) => ({\n    id: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: 'Python execution simulated',\n    passed: Math.random() > 0.5,\n    error: null\n  }));\n};\nexport const executeJavaCode = (code, testCases) => {\n  // Simulate Java execution\n  return testCases.map((testCase, index) => ({\n    id: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: 'Java execution simulated',\n    passed: Math.random() > 0.5,\n    error: null\n  }));\n};","map":{"version":3,"names":["executeJavaScriptLocally","code","testCases","results","map","testCase","index","func","Function","actual","input","includes","nums","target","eval","JSON","stringify","replace","toString","id","expected","passed","error","message","executePythonCode","Math","random","executeJavaCode"],"sources":["F:/PBL-SEM5/src/utils/codeExecutor.js"],"sourcesContent":["// Real code execution service integration\nexport const executeJavaScriptLocally = (code, testCases) => {\n  const results = testCases.map((testCase, index) => {\n    try {\n      // Create safe execution environment\n      const func = new Function('return ' + code)();\n      let actual;\n      \n      if (testCase.input.includes('target')) {\n        // Two Sum Problem\n        const [nums, target] = eval(`[${testCase.input}]`);\n        actual = JSON.stringify(func(nums, target));\n      } else {\n        // Palindrome Check\n        const input = testCase.input.replace(/\"/g, '');\n        actual = func(input).toString();\n      }\n      \n      return {\n        id: index + 1,\n        input: testCase.input,\n        expected: testCase.expected,\n        actual: actual || 'undefined',\n        passed: actual === testCase.expected,\n        error: null\n      };\n    } catch (error) {\n      return {\n        id: index + 1,\n        input: testCase.input,\n        expected: testCase.expected,\n        actual: 'Error',\n        passed: false,\n        error: error.message\n      };\n    }\n  });\n  \n  return results;\n};\n\nexport const executePythonCode = (code, testCases) => {\n  // Simulate Python execution\n  return testCases.map((testCase, index) => ({\n    id: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: 'Python execution simulated',\n    passed: Math.random() > 0.5,\n    error: null\n  }));\n};\n\nexport const executeJavaCode = (code, testCases) => {\n  // Simulate Java execution\n  return testCases.map((testCase, index) => ({\n    id: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: 'Java execution simulated',\n    passed: Math.random() > 0.5,\n    error: null\n  }));\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,wBAAwB,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAC3D,MAAMC,OAAO,GAAGD,SAAS,CAACE,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACjD,IAAI;MACF;MACA,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAAC,SAAS,GAAGP,IAAI,CAAC,CAAC,CAAC;MAC7C,IAAIQ,MAAM;MAEV,IAAIJ,QAAQ,CAACK,KAAK,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACrC;QACA,MAAM,CAACC,IAAI,EAAEC,MAAM,CAAC,GAAGC,IAAI,CAAC,IAAIT,QAAQ,CAACK,KAAK,GAAG,CAAC;QAClDD,MAAM,GAAGM,IAAI,CAACC,SAAS,CAACT,IAAI,CAACK,IAAI,EAAEC,MAAM,CAAC,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,MAAMH,KAAK,GAAGL,QAAQ,CAACK,KAAK,CAACO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;QAC9CR,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,CAACQ,QAAQ,CAAC,CAAC;MACjC;MAEA,OAAO;QACLC,EAAE,EAAEb,KAAK,GAAG,CAAC;QACbI,KAAK,EAAEL,QAAQ,CAACK,KAAK;QACrBU,QAAQ,EAAEf,QAAQ,CAACe,QAAQ;QAC3BX,MAAM,EAAEA,MAAM,IAAI,WAAW;QAC7BY,MAAM,EAAEZ,MAAM,KAAKJ,QAAQ,CAACe,QAAQ;QACpCE,KAAK,EAAE;MACT,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QACLH,EAAE,EAAEb,KAAK,GAAG,CAAC;QACbI,KAAK,EAAEL,QAAQ,CAACK,KAAK;QACrBU,QAAQ,EAAEf,QAAQ,CAACe,QAAQ;QAC3BX,MAAM,EAAE,OAAO;QACfY,MAAM,EAAE,KAAK;QACbC,KAAK,EAAEA,KAAK,CAACC;MACf,CAAC;IACH;EACF,CAAC,CAAC;EAEF,OAAOpB,OAAO;AAChB,CAAC;AAED,OAAO,MAAMqB,iBAAiB,GAAGA,CAACvB,IAAI,EAAEC,SAAS,KAAK;EACpD;EACA,OAAOA,SAAS,CAACE,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;IACzCa,EAAE,EAAEb,KAAK,GAAG,CAAC;IACbI,KAAK,EAAEL,QAAQ,CAACK,KAAK;IACrBU,QAAQ,EAAEf,QAAQ,CAACe,QAAQ;IAC3BX,MAAM,EAAE,4BAA4B;IACpCY,MAAM,EAAEI,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAC3BJ,KAAK,EAAE;EACT,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,MAAMK,eAAe,GAAGA,CAAC1B,IAAI,EAAEC,SAAS,KAAK;EAClD;EACA,OAAOA,SAAS,CAACE,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;IACzCa,EAAE,EAAEb,KAAK,GAAG,CAAC;IACbI,KAAK,EAAEL,QAAQ,CAACK,KAAK;IACrBU,QAAQ,EAAEf,QAAQ,CAACe,QAAQ;IAC3BX,MAAM,EAAE,0BAA0B;IAClCY,MAAM,EAAEI,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAC3BJ,KAAK,EAAE;EACT,CAAC,CAAC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}